{"version":3,"sources":["src/js/classes/Table.js","src/js/data.js","src/js/index.js"],"names":["Cell","className","element","document","createElement","setElementClass","TextCell","content","render","appendChild","createTextNode","NumberCell","toLocaleString","toFixed","BarGraphCell","data","average","range","bar","style","width","label","diff","textContent","averageLine","left","NumberLineCell","averages","vizColors","forEach","value","i","point","HeaderCell","sortCol","sortDir","initSort","table","id","addEventListener","classNameWithSort","getClassName","setSortColumn","setSortDirection","sort","cell","sortClass","addSorted","sorted","VizHeaderCell","start","end","startElement","createTickElement","endElement","averageElements","map","text","averageWrapper","averageColor","wrapper","innerHTML","toString","length","paddingLeft","line","HeaderRow","cells","row","RankedBodyRow","initialRank","rank","RankedTable","columnConfigs","tableElement","classNames","config","class","headers","header","validate","sortCols","sortable","getHeaderRow","Error","some","headerCells","headersWithRank","j","CellType","initialSort","clearedSortedCells","dataCol","a","b","Number","rows","getRows","updateTable","rankReverse","tbody","getElementsByTagName","BAIL_RATE_DATA","BAIL_RACE_DATA","createBailRateTable","getElementById","createBailRaceTable"],"mappings":"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CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,WACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,QACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,OAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,GACA,KAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,aAGJ,WACA,KACA,OAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,KAGJ,GACA,IACA,MAEF,CACE,aACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,WACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,WACA,CACU,KAAA,MACE,OAAA,CACR,aAGJ,WACA,IACA,KAEF,CACE,aACA,CACU,KAAA,MACE,OAAA,CACR,aAGJ,WACA,KACA,MAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,OAEF,CACE,WACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,OAEF,CACE,MACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,KAEF,CACE,OACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,GACA,KAEF,CACE,WACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,KAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,KAEF,CACE,aACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,KAEF,CACE,YACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,KAEF,CACE,aACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,YACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,OAEF,CACE,WACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,OAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,WACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,aACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,OAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,KAEF,CACE,cACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,iBACA,CACU,KAAA,MACE,OAAA,CACR,KAGJ,GACA,IACA,MAEF,CACE,QACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,eACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,MACA,OAEF,CACE,OACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,KAEF,CACE,aACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,WACA,CACU,KAAA,MACE,OAAA,CACR,KAGJ,GACA,IACA,MAEF,CACE,WACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,GACA,KAEF,CACE,cACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,KAEF,CACE,QACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,QACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,KAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,SACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,KAEF,CACE,aACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,MAEF,CACE,QACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,KAEF,CACE,eACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,OAEF,CACE,UACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,IACA,MAEF,CACE,OACA,CACU,KAAA,MACE,OAAA,CACR,cAGJ,YACA,KACA,QAGG,QAAA,eAAA,EAAA,IAAMC,EAAiB,CAC5B,CACE,QACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,YACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,YACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,QACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,QAEF,CACE,QACA,CACU,KAAA,OACE,OAAA,CACR,WACA,cAGJ,WACA,YACA,SAEF,CACE,WACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,QACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,WACA,aAGJ,WACA,WACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,IACA,cAGJ,IACA,YACA,SAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,WACA,cAGJ,WACA,YACA,SAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,OACA,cAGJ,OACA,YACA,QAEF,CACE,aACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,WACA,CACU,KAAA,OACE,OAAA,CACR,WACA,cAGJ,WACA,YACA,QAEF,CACE,WACA,CACU,KAAA,OACE,OAAA,CACR,YACA,aAGJ,YACA,WACA,SAEF,CACE,aACA,CACU,KAAA,OACE,OAAA,CACR,YACA,aAGJ,YACA,WACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,YACA,aAGJ,YACA,WACA,SAEF,CACE,WACA,CACU,KAAA,OACE,OAAA,CACR,YACA,aAGJ,YACA,WACA,SAEF,CACE,MACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,QAEF,CACE,OACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,GACA,cAGJ,GACA,YACA,SAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,GACA,cAGJ,GACA,YACA,SAEF,CACE,WACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,QAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,aACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,QAEF,CACE,YACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,MACA,cAGJ,MACA,YACA,QAEF,CACE,aACA,CACU,KAAA,OACE,OAAA,CACR,WACA,aAGJ,WACA,WACA,SAEF,CACE,YACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,WACA,CACU,KAAA,OACE,OAAA,CACR,YACA,aAGJ,YACA,WACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,QAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,WACA,aAGJ,WACA,WACA,SAEF,CACE,WACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,QAEF,CACE,aACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,cACA,CACU,KAAA,OACE,OAAA,CACR,WACA,cAGJ,WACA,YACA,SAEF,CACE,iBACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,QACA,CACU,KAAA,OACE,OAAA,CACR,GACA,cAGJ,GACA,YACA,SAEF,CACE,eACA,CACU,KAAA,OACE,OAAA,CACR,YACA,aAGJ,YACA,WACA,SAEF,CACE,OACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,QAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,GACA,cAGJ,GACA,YACA,SAEF,CACE,aACA,CACU,KAAA,OACE,OAAA,CACR,WACA,cAGJ,WACA,YACA,QAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,KACA,cAGJ,KACA,YACA,SAEF,CACE,WACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,WACA,CACU,KAAA,OACE,OAAA,CACR,KACA,cAGJ,KACA,YACA,SAEF,CACE,cACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,QACA,CACU,KAAA,OACE,OAAA,CACR,GACA,cAGJ,GACA,YACA,SAEF,CACE,QACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,SACA,CACU,KAAA,OACE,OAAA,CACR,GACA,cAGJ,GACA,YACA,SAEF,CACE,aACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,QACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,eACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,SAEF,CACE,UACA,CACU,KAAA,OACE,OAAA,CACR,GACA,cAGJ,GACA,YACA,QAEF,CACE,OACA,CACU,KAAA,OACE,OAAA,CACR,YACA,cAGJ,YACA,YACA,UAt2BG,QAAA,eAAA;;ACtuBY,aA9FnB,IAAA,EAAA,QAAA,sBACA,EAAA,QAAA,aAEMC,EAAsB,WACpB/B,IAqCAC,EAAevE,SAASsG,eAAe,mBACzCjC,IAAAA,EAAJ,YAAgB8B,EAAhB,eAtCsB,CACpB,CACEzB,MAAO,mBACPE,OAAQ,SACRG,UAAU,GAEZ,CACEL,MAAO,WACPE,OAAQ,CACG,MAAA,EACF,IAAA,GACK,SAAA,CACV,CACU,KAAA,gBACC,MAAA,eAIfG,UAAU,GAEZ,CACEL,MAAO,6BACPE,OAAQ,qBACRG,UAAU,GAEZ,CACEL,MAAO,8BACPE,OAAQ,kBACRG,UAAU,GAEZ,CACEL,MAAO,+BACPE,OAAQ,cACRG,UAAU,IAGG,EAEwCR,IAIrDgC,EAAsB,WACpBjC,IAyCAC,EAAevE,SAASsG,eAAe,mBAEzCjC,IAAAA,EAAJ,YAAgB+B,EAAhB,eA3CsB,CACpB,CACE1B,MAAO,mBACPE,OAAQ,SACRG,UAAU,GAEZ,CACEL,MAAO,WACPE,OAAQ,CACG,MAAA,EACF,IAAA,IACK,SAAA,CACV,CACU,KAAA,QACC,MAAA,YAEX,CACU,KAAA,QACC,MAAA,eAIfG,UAAU,GAEZ,CACEL,MAAO,8BACPE,OAAQ,oBACRG,UAAU,GAEZ,CACEL,MAAO,8BACPE,OAAQ,oBACRG,UAAU,GAEZ,CACEL,MAAO,wBACPE,OAAQ,OACRG,UAAU,IAGG,EAGwCR,IAG3D8B,IACAE","file":"js.c52c62c0.js","sourceRoot":"..","sourcesContent":["class Cell {\n  constructor(className) {\n    this.className = className;\n  }\n\n  render() {\n    this.element = document.createElement(\"td\");\n    this.setElementClass(this.className);\n  }\n\n  getClassName() {\n    return this.className;\n  }\n\n  setElementClass(className) {\n    this.element.className = className;\n  }\n}\n\n\nclass TextCell extends Cell {\n  constructor(content, className) {\n    super(className);\n    this.content = content;\n    this.render();\n  }\n\n  render() {\n    super.render();\n    this.element.appendChild(document.createTextNode(this.content));\n  }\n}\n\n\nclass NumberCell extends Cell {\n  constructor(content, className) {\n    super(className);\n    this.content = content % 1 === 0 ? content.toLocaleString() : content.toFixed(1);\n    this.render();\n  }\n\n  render() {\n    super.render();\n    this.element.appendChild(document.createTextNode(this.content));\n  }\n}\n\n\nclass BarGraphCell extends Cell {\n  constructor(content, className, data) {\n    super(className);\n    // BarGraphCell should only ever be passed one number\n    this.content = content[\"values\"][0];\n    this.average = data[\"averages\"][0][\"value\"];\n    this.range = data;\n    this.render();\n  }\n\n  render() {\n    super.render();\n    // create the horizontal bar and scale its width by the value and range\n    const bar = document.createElement(\"div\");\n    bar.className = \"viz-bar\";\n    bar.style.width = `${this.content / this.range[\"end\"] * 100}%`;\n    // label the bar with the difference between value and average\n    const label = document.createElement(\"div\");\n    const diff = this.content - this.average;\n    label.textContent = `${diff > 0 ? \"+\" : \"\"}${diff.toFixed(1)}`;\n    label.className = \"bar-label\";\n    bar.appendChild(label);\n    this.element.appendChild(bar);\n    // add the vertical line denoting the average\n    const averageLine = document.createElement(\"div\");\n    averageLine.className = \"bar-average-line green\";\n    averageLine.style.left = `${this.average / this.range[\"end\"] * 100}%`;\n    this.element.appendChild(averageLine);\n  }\n}\n\n\nclass NumberLineCell extends Cell {\n  constructor(content, className, data) {\n    super(className);\n    this.content = content[\"values\"];\n    this.averages = data[\"averages\"];\n    this.range = data;\n    this.vizColors = [\"green\", \"purple\"];\n    this.render();\n  }\n\n  render() {\n    super.render();\n    // create the number line\n    const bar = document.createElement(\"div\");\n    bar.className = \"viz-number-line\";\n    this.element.appendChild(bar);\n    // create the points on the number line\n    this.content.forEach((value, i) => {\n      const point = document.createElement(\"div\");\n      point.className = `viz-number-line-point ${this.vizColors[i]}`;\n      point.style.left = `${value / this.range[\"end\"] * 100}%`;\n      this.element.appendChild(point);\n    });\n    // add the vertical line denoting the average\n    this.averages.forEach((average, i) => {\n      const averageLine = document.createElement(\"div\");\n      averageLine.className = `bar-average-line ${this.vizColors[i]}`;\n      averageLine.style.left = `${average[\"value\"] / this.range[\"end\"] * 100}%`;\n      this.element.appendChild(averageLine);\n    });\n  }\n}\n\n\nclass HeaderCell extends Cell {\n  constructor(content, className, sortCol, sortDir, initSort, table, id) {\n    super(className);\n    this.content = content;\n    this.sortCol = sortCol;\n    this.sortDir = sortDir;\n    this.initSort = initSort;\n    this.table = table;\n    this.id = id;\n    this.render();\n\n    // add event listener for sorting\n    if (this.sortCol) {\n      this.element.addEventListener(\"click\", () => {\n        const classNameWithSort = this.getClassName();\n        this.table.setSortColumn(this.id);\n        this.table.setSortDirection(this.sortDir);\n        this.table.sort(false);\n        // after sorting set the class to ensure its the only column highlighted\n        this.setElementClass(classNameWithSort, true);\n        // toggle sort direction for the next click\n        this.sortDir *= -1;\n      });\n    }\n\n    // if we're initializing this sort, update sortDir for the next click\n    if (this.initSort) {\n      this.sortDir *= -1;\n    }\n  }\n\n  render() {\n    const cell = document.createElement(\"th\");\n    cell.className = this.className;\n    cell.appendChild(document.createTextNode(this.content));\n    this.element = cell;\n    if (this.sortCol) {\n      const classNameWithSort = this.getClassName();\n      this.setElementClass(classNameWithSort, this.initSort);\n    }\n  }\n\n  getClassName() {\n    const sortClass = this.sortDir > 0 ? \"sort-asc\" :\n      this.sortDir < 0 ? \"sort-desc\" : \"\";\n    return `${this.className} ${sortClass}`;\n  }\n\n  setElementClass(className, addSorted) {\n    const sorted = addSorted ? \"sorted\" : \"\";\n    super.setElementClass(`${className} ${sorted}`);\n  }\n}\n\n\nclass VizHeaderCell extends HeaderCell {\n  constructor(data, className, sortCol, sortDir, initSort, table, id) {\n    super(data, className, sortCol, sortDir, initSort, table, id);\n  }\n\n  render() {\n    const vizColors = [\"green\", \"purple\"];\n    const start = this.content[\"start\"];\n    const end = this.content[\"end\"];\n    const averages = this.content[\"averages\"];\n\n    const cell = document.createElement(\"th\");\n    cell.className = this.className;\n    // create start, end, and average tick/number elements\n    const startElement = this.createTickElement(start, \"start-num\");\n    const endElement = this.createTickElement(end, \"end-num\");\n    const averageElements = averages.map((average, i) => {\n      const text = `${average[\"name\"]}:<br>${average[\"value\"].toFixed(1)}%`;\n      const className = \"average\";\n      return this.createTickElement(text, className, vizColors[i]);\n    });\n    // create wrapper around averages for positioning\n    const averageWrapper = document.createElement(\"div\");\n    averageWrapper.className = \"average-wrapper\";\n    // offset the average elements by the value/end ratio (and subtract padding)\n    averageElements.forEach((element, i) => {\n      element.style.left = `calc(${averages[i][\"value\"] / end * 100}%)`;\n      averageWrapper.appendChild(element);\n    });\n    // add all the elements to the cell\n    [startElement, endElement, averageWrapper].forEach(element => {\n      cell.appendChild(element);\n    });\n    this.element = cell;\n  }\n\n  createTickElement(content, className, averageColor) {\n    const wrapper = document.createElement(\"div\");\n    wrapper.className = className;\n    const text = document.createElement(\"div\");\n    text.innerHTML = content;\n    if (className === \"average\") text.className = \"average-text\";\n    wrapper.appendChild(text);\n    // adjust padding based on number of digits\n    if (className === \"start-num\" && content.toString().length === 1) {\n      wrapper.style.paddingLeft = `${0.25}em`;\n    }\n\n    // create the vertical tick underneath the number\n    const line = document.createElement(\"div\");\n    line.className = `${className === \"average\" ? \"average-line\" : \"viz-line\"}`;\n    if (averageColor) line.className += ` ${averageColor}`;\n    wrapper.appendChild(line);\n    return wrapper;\n  }\n}\n\n\nclass HeaderRow {\n  constructor(cells) {\n    this.cells = cells;\n    this.render();\n  }\n\n  render() {\n    const row = document.createElement(\"tr\");\n    this.cells.forEach(cell => {\n      row.appendChild(cell.element);\n    });\n    this.element = row;\n  }\n\n  clearedSortedCells() {\n    this.cells.forEach(cell => {\n      const className = cell.getClassName();\n      cell.setElementClass(className, false);\n    });\n  }\n}\n\n\nclass RankedBodyRow {\n  constructor(cells, initialRank) {\n    this.cells = cells;\n    this.render(initialRank);\n  }\n\n  render(rank, sorted) {\n    const row = document.createElement(\"tr\");\n    const rankedCells = [\n      new TextCell(rank, \"rank-cell\"),\n      ...this.cells\n    ];\n    rankedCells.forEach((cell, i) => {\n      cell.setElementClass(\n        i === sorted ? `${cell.className} sorted` : cell.className\n      );\n      row.appendChild(cell.element);\n    });\n    this.element = row;\n  }\n}\n\n\nexport class RankedTable {\n  constructor(data, columnConfigs, initSort, tableElement) {\n    this.classNames = columnConfigs.map((config) => config.class);\n    this.headers = columnConfigs.map((config) => config.header);\n    this.data = data;\n    this.validate(this.data, this.classNames, this.headers);\n    this.element = tableElement;\n\n    this.sortCols = columnConfigs.map((config) => config.sortable);\n    // start with sorting descending; add one to account for rank\n    this.sortCol = initSort + 1;\n    this.sortDir = -1;\n    this.sort(true); // this initial sort populates this.rows\n\n    this.header = this.getHeaderRow();\n\n    this.render();\n  }\n\n  validate(data, classNames, headers) {\n    if (classNames.length !== headers.length) {\n      throw new Error(\"Number of class names does not match number of headers\");\n    }\n    if (data.some((row) => row.length != headers.length)) {\n      throw new Error(`${headers.length} columns of data required`);\n    }\n  }\n\n  getHeaderRow() {\n    const headerCells = this.headers.map((header, i) => {\n      const CellType = typeof(header) == \"string\" ? HeaderCell : VizHeaderCell;\n      return new CellType(\n        header,\n        this.classNames[i],\n        this.sortCols[i],\n        // 1 designates ascending; -1, descending (default); 0, not sortable\n        this.sortCols[i] ? -1 : 0,\n        i + 1 === this.sortCol,\n        this,\n        // adjust ids for rank and space headers\n        i + 1\n      );\n    });\n    const headersWithRank = [\n      new HeaderCell(\"Rank\", \"rank-cell\", false, 0, false, this, 0),\n      ...headerCells\n    ];\n    return new HeaderRow(headersWithRank);\n  }\n\n  getRows(data) {\n    return data.map((row, i) => {\n      // Specify how data will be rendered\n      const cells = row.map((cell, j) => {\n        let CellType = TextCell;\n        if (typeof(cell) == \"number\") CellType = NumberCell;\n        if (typeof(cell) == \"object\") {\n          CellType = cell[\"type\"] === \"bar\" ? BarGraphCell : NumberLineCell;\n        }\n        return new CellType(cell, this.classNames[j], this.headers[j]);\n      });\n      return new RankedBodyRow(cells, i + 1);\n    });\n  }\n\n  setSortColumn(i) {\n    this.sortCol = i;\n  }\n\n  setSortDirection(sortDir) {\n    this.sortDir = sortDir;\n  }\n\n  sort(initialSort) {\n    if (!initialSort) this.header.clearedSortedCells();\n\n    // data doesn't have rank, so subtract one from the index\n    const dataCol = this.sortCol - 1;\n    this.data.sort((a, b) => {\n      // Assumes that we only want to sort numbers, which is fine for now\n      // May need to support sorting multiple types\n      const i = Number(a[dataCol]);\n      const j = Number(b[dataCol]);\n      if (i < j) {\n        return this.sortDir * -1;\n      } else if (i > j) {\n        return this.sortDir;\n      } else {\n        return 0;\n      }\n    });\n    this.rows = this.getRows(this.data);\n    this.updateTable(false);\n  }\n\n  updateTable(rankReverse) {\n    const tbody = this.element.getElementsByTagName(\"tbody\")[0];\n    tbody.textContent = \"\";\n\n    // repopulate with updated rows\n    this.rows.forEach((row, i) => {\n      const rank = rankReverse ? this.rows.length - i : i + 1;\n      row.render(rank, this.sortCol);\n      tbody.appendChild(row.element);\n    });\n  }\n\n  render() {\n    // create header row\n    const thead = this.element.getElementsByTagName(\"thead\")[0];\n    thead.appendChild(this.header.element);\n\n    // create rows\n    const tbody = this.element.getElementsByTagName(\"tbody\")[0];\n    this.rows.forEach(row => {\n      tbody.appendChild(row.element);\n    });\n  }\n}\n","/*\n * To get the data in this format, export a CSV with the columns in the order\n * you want. In the case of BAIL_RACE_DATA, I had [county, black %, white %,\n * difference]. I pasted the contents of the CSV into this file (you can wrap\n * multi-line strings in ``) and created the following script to convert from\n * that string to the output array. JSON.stringify will output something with\n * no spacing, so i just pasted the result into a JSON formatter to get the\n * desired format (https://jsonformatter.org).\n *\n * const excelData = ``;\n * const data = [];\n * const lines = excelData.split(\"\\n\");\n * lines.forEach((line, i) => {\n *   const cells = line.split(\",\");\n *   const diff = parseFloat(cells[3]);\n *   data.push([\n *     cells[0], // county\n *     {\n *       \"type\": \"line\", // visualization\n *       \"values\": [parseFloat(cells[1]), parseFloat(cells[2])]\n *     },\n *     parseFloat(cells[1]), // black cash bail rate\n *     parseFloat(cells[2]), // white cash bail rate\n *     `${diff > 0 ? \"+\" : \"\"}${diff.toFixed(1)}` // overall cash bail rate\n *   ]);\n * });\n *\n * console.log(JSON.stringify(data));\n */\n\nexport const BAIL_RATE_DATA = [\n  [\n    \"Adams\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        30.18867925\n      ]\n    },\n    30.18867925,\n    775,\n    2537\n  ],\n  [\n    \"Allegheny\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        43.50802205\n      ]\n    },\n    43.50802205,\n    13884,\n    31723\n  ],\n  [\n    \"Armstrong\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        41.05888709\n      ]\n    },\n    41.05888709,\n    742,\n    1808\n  ],\n  [\n    \"Beaver\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        49.05179283\n      ]\n    },\n    49.05179283,\n    4959,\n    5967\n  ],\n  [\n    \"Bedford\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        38.63636364\n      ]\n    },\n    38.63636364,\n    563,\n    1460\n  ],\n  [\n    \"Berks\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        50.92425977\n      ]\n    },\n    50.92425977,\n    6036,\n    11688\n  ],\n  [\n    \"Blair\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        34.04638145\n      ]\n    },\n    34.04638145,\n    1674,\n    4826\n  ],\n  [\n    \"Bradford\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        45.49865229\n      ]\n    },\n    45.49865229,\n    824,\n    1805\n  ],\n  [\n    \"Bucks\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        32.41325938\n      ]\n    },\n    32.41325938,\n    4959,\n    15185\n  ],\n  [\n    \"Butler\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        31.15234375\n      ]\n    },\n    31.15234375,\n    626,\n    2017\n  ],\n  [\n    \"Cambria\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        44.29388101\n      ]\n    },\n    44.29388101,\n    2059,\n    4613\n  ],\n  [\n    \"Cameron\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        21.67832168\n      ]\n    },\n    21.67832168,\n    30,\n    112\n  ],\n  [\n    \"Carbon\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        32.99299883\n      ]\n    },\n    32.99299883,\n    1098,\n    3307\n  ],\n  [\n    \"Centre\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        26.08333333\n      ]\n    },\n    26.08333333,\n    871,\n    3370\n  ],\n  [\n    \"Chester\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        38.0970325\n      ]\n    },\n    38.0970325,\n    3968,\n    10351\n  ],\n  [\n    \"Clarion\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        40\n      ]\n    },\n    40,\n    487,\n    1193\n  ],\n  [\n    \"Clearfield\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        36.28318584\n      ]\n    },\n    36.28318584,\n    734,\n    2002\n  ],\n  [\n    \"Clinton\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        36.92628651\n      ]\n    },\n    36.92628651,\n    527,\n    1421\n  ],\n  [\n    \"Columbia\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        38.18897638\n      ]\n    },\n    38.18897638,\n    667,\n    1722\n  ],\n  [\n    \"Crawford\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        28.8973384\n      ]\n    },\n    28.8973384,\n    225,\n    768\n  ],\n  [\n    \"Cumberland\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        38.5278224\n      ]\n    },\n    38.5278224,\n    2593,\n    6732\n  ],\n  [\n    \"Dauphin\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        42.44132779\n      ]\n    },\n    42.44132779,\n    5850,\n    13585\n  ],\n  [\n    \"Delaware\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        55.68060922\n      ]\n    },\n    55.68060922,\n    9514,\n    16808\n  ],\n  [\n    \"Elk\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        28.62318841\n      ]\n    },\n    28.62318841,\n    229,\n    799\n  ],\n  [\n    \"Erie\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        43.95330739\n      ]\n    },\n    43.95330739,\n    2750,\n    6198\n  ],\n  [\n    \"Fayette\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        44.27074081\n      ]\n    },\n    44.27074081,\n    2463,\n    5546\n  ],\n  [\n    \"Forest\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        34.75609756\n      ]\n    },\n    34.75609756,\n    50,\n    123\n  ],\n  [\n    \"Franklin\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        37.47902685\n      ]\n    },\n    37.47902685,\n    1772,\n    4681\n  ],\n  [\n    \"Fulton\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        28.67298578\n      ]\n    },\n    28.67298578,\n    113,\n    383\n  ],\n  [\n    \"Greene\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        37.44343891\n      ]\n    },\n    37.44343891,\n    324,\n    834\n  ],\n  [\n    \"Huntingdon\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        38.96907216\n      ]\n    },\n    38.96907216,\n    552,\n    1353\n  ],\n  [\n    \"Indiana\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        35.01070664\n      ]\n    },\n    35.01070664,\n    322,\n    922\n  ],\n  [\n    \"Jefferson\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        38.55721393\n      ]\n    },\n    38.55721393,\n    460,\n    1166\n  ],\n  [\n    \"Juniata\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        34.46215139\n      ]\n    },\n    34.46215139,\n    168,\n    455\n  ],\n  [\n    \"Lackawanna\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        52.63500325\n      ]\n    },\n    52.63500325,\n    3052,\n    5783\n  ],\n  [\n    \"Lancaster\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        44.93240475\n      ]\n    },\n    44.93240475,\n    5430,\n    11977\n  ],\n  [\n    \"Lawrence\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        48.92407633\n      ]\n    },\n    48.92407633,\n    1182,\n    2398\n  ],\n  [\n    \"Lebanon\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        38.70437956\n      ]\n    },\n    38.70437956,\n    2085,\n    5329\n  ],\n  [\n    \"Lehigh\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        54.88215488\n      ]\n    },\n    54.88215488,\n    6526,\n    11845\n  ],\n  [\n    \"Luzerne\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        38.28885249\n      ]\n    },\n    38.28885249,\n    3828,\n    9950\n  ],\n  [\n    \"Lycoming\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        34.68169761\n      ]\n    },\n    34.68169761,\n    1557,\n    4475\n  ],\n  [\n    \"McKean\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        42.38134888\n      ]\n    },\n    42.38134888,\n    488,\n    1147\n  ],\n  [\n    \"Mercer\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        36.12542955\n      ]\n    },\n    36.12542955,\n    1653,\n    4571\n  ],\n  [\n    \"Mifflin\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        48.49498328\n      ]\n    },\n    48.49498328,\n    721,\n    1477\n  ],\n  [\n    \"Monroe\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        32.79661017\n      ]\n    },\n    32.79661017,\n    1910,\n    5757\n  ],\n  [\n    \"Montgomery\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        33.63556165\n      ]\n    },\n    33.63556165,\n    6723,\n    19702\n  ],\n  [\n    \"Montour\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        35.19163763\n      ]\n    },\n    35.19163763,\n    100,\n    275\n  ],\n  [\n    \"Northampton\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        45.83529967\n      ]\n    },\n    45.83529967,\n    3804,\n    8234\n  ],\n  [\n    \"Northumberland\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        36\n      ]\n    },\n    36,\n    869,\n    2414\n  ],\n  [\n    \"Perry\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        28.98148148\n      ]\n    },\n    28.98148148,\n    305,\n    1064\n  ],\n  [\n    \"Philadelphia\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        50.12216352\n      ]\n    },\n    50.12216352,\n    32072,\n    63180\n  ],\n  [\n    \"Pike\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        34.16738568\n      ]\n    },\n    34.16738568,\n    382,\n    1109\n  ],\n  [\n    \"Potter\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        23.36601307\n      ]\n    },\n    23.36601307,\n    142,\n    593\n  ],\n  [\n    \"Schuylkill\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        37.74187822\n      ]\n    },\n    37.74187822,\n    2100,\n    5531\n  ],\n  [\n    \"Snyder\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        35.92870544\n      ]\n    },\n    35.92870544,\n    381,\n    1060\n  ],\n  [\n    \"Somerset\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        25\n      ]\n    },\n    25,\n    498,\n    1962\n  ],\n  [\n    \"Sullivan\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        36.44859813\n      ]\n    },\n    36.44859813,\n    36,\n    103\n  ],\n  [\n    \"Susquehanna\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        40.32663317\n      ]\n    },\n    40.32663317,\n    317,\n    783\n  ],\n  [\n    \"Tioga\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        36.38603696\n      ]\n    },\n    36.38603696,\n    868,\n    2385\n  ],\n  [\n    \"Union\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        25.36136662\n      ]\n    },\n    25.36136662,\n    186,\n    743\n  ],\n  [\n    \"Venango\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        37.84477229\n      ]\n    },\n    37.84477229,\n    586,\n    1549\n  ],\n  [\n    \"Warren\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        40.61393152\n      ]\n    },\n    40.61393152,\n    338,\n    831\n  ],\n  [\n    \"Washington\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        38.93688681\n      ]\n    },\n    38.93688681,\n    2596,\n    6615\n  ],\n  [\n    \"Wayne\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        37.20349563\n      ]\n    },\n    37.20349563,\n    286,\n    779\n  ],\n  [\n    \"Westmoreland\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        31.71662559\n      ]\n    },\n    31.71662559,\n    3840,\n    11934\n  ],\n  [\n    \"Wyoming\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        35.68118628\n      ]\n    },\n    35.68118628,\n    377,\n    1056\n  ],\n  [\n    \"York\",\n    {\n      \"type\": \"bar\",\n      \"values\": [\n        44.27380952\n      ]\n    },\n    44.27380952,\n    7356,\n    16539\n  ]\n];\nexport const BAIL_RACE_DATA = [\n  [\n    \"Adams\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        43.56060606,\n        29.03651562\n      ]\n    },\n    43.56060606,\n    29.03651562,\n    \"+14.5\"\n  ],\n  [\n    \"Allegheny\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        57.06645057,\n        35.29897333\n      ]\n    },\n    57.06645057,\n    35.29897333,\n    \"+21.8\"\n  ],\n  [\n    \"Armstrong\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        62.71186441,\n        39.52662722\n      ]\n    },\n    62.71186441,\n    39.52662722,\n    \"+23.2\"\n  ],\n  [\n    \"Beaver\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        64.33048433,\n        43.92212726\n      ]\n    },\n    64.33048433,\n    43.92212726,\n    \"+20.4\"\n  ],\n  [\n    \"Bedford\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        52.57731959,\n        37.56419663\n      ]\n    },\n    52.57731959,\n    37.56419663,\n    \"+15.0\"\n  ],\n  [\n    \"Berks\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        58.42078961,\n        50.24259317\n      ]\n    },\n    58.42078961,\n    50.24259317,\n    \"+8.2\"\n  ],\n  [\n    \"Blair\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        58.6998088,\n        31.76853358\n      ]\n    },\n    58.6998088,\n    31.76853358,\n    \"+26.9\"\n  ],\n  [\n    \"Bradford\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        62.26415094,\n        45.14840183\n      ]\n    },\n    62.26415094,\n    45.14840183,\n    \"+17.1\"\n  ],\n  [\n    \"Bucks\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        41.06901218,\n        30.62392673\n      ]\n    },\n    41.06901218,\n    30.62392673,\n    \"+10.4\"\n  ],\n  [\n    \"Butler\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        44.7761194,\n        29.5154185\n      ]\n    },\n    44.7761194,\n    29.5154185,\n    \"+15.3\"\n  ],\n  [\n    \"Cambria\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        65.52083333,\n        39.14590747\n      ]\n    },\n    65.52083333,\n    39.14590747,\n    \"+26.4\"\n  ],\n  [\n    \"Cameron\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        100,\n        25.45454545\n      ]\n    },\n    100,\n    25.45454545,\n    \"+74.5\"\n  ],\n  [\n    \"Carbon\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        43.7751004,\n        32.34139961\n      ]\n    },\n    43.7751004,\n    32.34139961,\n    \"+11.4\"\n  ],\n  [\n    \"Centre\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        46.74115456,\n        21.88492764\n      ]\n    },\n    46.74115456,\n    21.88492764,\n    \"+24.9\"\n  ],\n  [\n    \"Chester\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        48.47354138,\n        34.29690666\n      ]\n    },\n    48.47354138,\n    34.29690666,\n    \"+14.2\"\n  ],\n  [\n    \"Clarion\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        40.625,\n        40.83259522\n      ]\n    },\n    40.625,\n    40.83259522,\n    \"-0.2\"\n  ],\n  [\n    \"Clearfield\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        59.30232558,\n        35.64718163\n      ]\n    },\n    59.30232558,\n    35.64718163,\n    \"+23.7\"\n  ],\n  [\n    \"Clinton\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        47.14285714,\n        35.98750976\n      ]\n    },\n    47.14285714,\n    35.98750976,\n    \"+11.2\"\n  ],\n  [\n    \"Columbia\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        40.7960199,\n        38.46153846\n      ]\n    },\n    40.7960199,\n    38.46153846,\n    \"+2.3\"\n  ],\n  [\n    \"Crawford\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        53.33333333,\n        28.3197832\n      ]\n    },\n    53.33333333,\n    28.3197832,\n    \"+25.0\"\n  ],\n  [\n    \"Cumberland\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        51.61744023,\n        35.0094162\n      ]\n    },\n    51.61744023,\n    35.0094162,\n    \"+16.6\"\n  ],\n  [\n    \"Dauphin\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        51.21710526,\n        36.4556962\n      ]\n    },\n    51.21710526,\n    36.4556962,\n    \"+14.8\"\n  ],\n  [\n    \"Delaware\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        63.75237882,\n        48.4952381\n      ]\n    },\n    63.75237882,\n    48.4952381,\n    \"+15.3\"\n  ],\n  [\n    \"Elk\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        27.77777778,\n        28.68117798\n      ]\n    },\n    27.77777778,\n    28.68117798,\n    \"-0.9\"\n  ],\n  [\n    \"Erie\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        63.73239437,\n        37.02714731\n      ]\n    },\n    63.73239437,\n    37.02714731,\n    \"+26.7\"\n  ],\n  [\n    \"Fayette\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        54,\n        42.30092389\n      ]\n    },\n    54,\n    42.30092389,\n    \"+11.7\"\n  ],\n  [\n    \"Forest\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        85,\n        32.03883495\n      ]\n    },\n    85,\n    32.03883495,\n    \"+53.0\"\n  ],\n  [\n    \"Franklin\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        49.26553672,\n        35.19494204\n      ]\n    },\n    49.26553672,\n    35.19494204,\n    \"+14.1\"\n  ],\n  [\n    \"Fulton\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        31.57894737,\n        29.27536232\n      ]\n    },\n    31.57894737,\n    29.27536232,\n    \"+2.3\"\n  ],\n  [\n    \"Greene\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        58.97435897,\n        37.86163522\n      ]\n    },\n    58.97435897,\n    37.86163522,\n    \"+21.1\"\n  ],\n  [\n    \"Huntingdon\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        64.05228758,\n        37.83333333\n      ]\n    },\n    64.05228758,\n    37.83333333,\n    \"+26.2\"\n  ],\n  [\n    \"Indiana\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        30.39215686,\n        36.21169916\n      ]\n    },\n    30.39215686,\n    36.21169916,\n    \"-5.8\"\n  ],\n  [\n    \"Jefferson\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        72.97297297,\n        38.35252436\n      ]\n    },\n    72.97297297,\n    38.35252436,\n    \"+34.6\"\n  ],\n  [\n    \"Juniata\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        43.75,\n        36.67425968\n      ]\n    },\n    43.75,\n    36.67425968,\n    \"+7.1\"\n  ],\n  [\n    \"Lackawanna\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        67.1345995,\n        48.9720035\n      ]\n    },\n    67.1345995,\n    48.9720035,\n    \"+18.2\"\n  ],\n  [\n    \"Lancaster\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        55.54532904,\n        43.07425541\n      ]\n    },\n    55.54532904,\n    43.07425541,\n    \"+12.5\"\n  ],\n  [\n    \"Lawrence\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        66.28477905,\n        43.4806939\n      ]\n    },\n    66.28477905,\n    43.4806939,\n    \"+22.8\"\n  ],\n  [\n    \"Lebanon\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        48.84547069,\n        37.97733949\n      ]\n    },\n    48.84547069,\n    37.97733949,\n    \"+10.9\"\n  ],\n  [\n    \"Lehigh\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        61.81634031,\n        52.85376562\n      ]\n    },\n    61.81634031,\n    52.85376562,\n    \"+9.0\"\n  ],\n  [\n    \"Luzerne\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        53.5892323,\n        34.6550856\n      ]\n    },\n    53.5892323,\n    34.6550856,\n    \"+18.9\"\n  ],\n  [\n    \"Lycoming\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        55.01355014,\n        28.14726841\n      ]\n    },\n    55.01355014,\n    28.14726841,\n    \"+26.9\"\n  ],\n  [\n    \"McKean\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        61.33333333,\n        41.23134328\n      ]\n    },\n    61.33333333,\n    41.23134328,\n    \"+20.1\"\n  ],\n  [\n    \"Mercer\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        45.40337711,\n        33.35235378\n      ]\n    },\n    45.40337711,\n    33.35235378,\n    \"+12.1\"\n  ],\n  [\n    \"Mifflin\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        70.11494253,\n        47.48201439\n      ]\n    },\n    70.11494253,\n    47.48201439,\n    \"+22.6\"\n  ],\n  [\n    \"Monroe\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        35.13011152,\n        32.41612358\n      ]\n    },\n    35.13011152,\n    32.41612358,\n    \"+2.7\"\n  ],\n  [\n    \"Montgomery\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        43.27198364,\n        28.69733969\n      ]\n    },\n    43.27198364,\n    28.69733969,\n    \"+14.6\"\n  ],\n  [\n    \"Montour\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        46.15384615,\n        35.34136546\n      ]\n    },\n    46.15384615,\n    35.34136546,\n    \"+10.8\"\n  ],\n  [\n    \"Northampton\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        55.7063541,\n        43.86813852\n      ]\n    },\n    55.7063541,\n    43.86813852,\n    \"+11.8\"\n  ],\n  [\n    \"Northumberland\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        56.81818182,\n        33.91066545\n      ]\n    },\n    56.81818182,\n    33.91066545,\n    \"+22.9\"\n  ],\n  [\n    \"Perry\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        40,\n        27.68130746\n      ]\n    },\n    40,\n    27.68130746,\n    \"+12.3\"\n  ],\n  [\n    \"Philadelphia\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        56.02170568,\n        43.3107617\n      ]\n    },\n    56.02170568,\n    43.3107617,\n    \"+12.7\"\n  ],\n  [\n    \"Pike\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        37.41007194,\n        34.02061856\n      ]\n    },\n    37.41007194,\n    34.02061856,\n    \"+3.4\"\n  ],\n  [\n    \"Potter\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        75,\n        23.24786325\n      ]\n    },\n    75,\n    23.24786325,\n    \"+51.8\"\n  ],\n  [\n    \"Schuylkill\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        46.5060241,\n        37.27521501\n      ]\n    },\n    46.5060241,\n    37.27521501,\n    \"+9.2\"\n  ],\n  [\n    \"Snyder\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        52.5,\n        34.59183673\n      ]\n    },\n    52.5,\n    34.59183673,\n    \"+17.9\"\n  ],\n  [\n    \"Somerset\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        69.56521739,\n        23.20855615\n      ]\n    },\n    69.56521739,\n    23.20855615,\n    \"+46.4\"\n  ],\n  [\n    \"Sullivan\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        62.5,\n        32.63157895\n      ]\n    },\n    62.5,\n    32.63157895,\n    \"+29.9\"\n  ],\n  [\n    \"Susquehanna\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        66.66666667,\n        39.76377953\n      ]\n    },\n    66.66666667,\n    39.76377953,\n    \"+26.9\"\n  ],\n  [\n    \"Tioga\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        57,\n        34.50800915\n      ]\n    },\n    57,\n    34.50800915,\n    \"+22.5\"\n  ],\n  [\n    \"Union\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        38.20224719,\n        23.24159021\n      ]\n    },\n    38.20224719,\n    23.24159021,\n    \"+15.0\"\n  ],\n  [\n    \"Venango\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        60.13986014,\n        35.56187767\n      ]\n    },\n    60.13986014,\n    35.56187767,\n    \"+24.6\"\n  ],\n  [\n    \"Warren\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        70,\n        39.95067818\n      ]\n    },\n    70,\n    39.95067818,\n    \"+30.0\"\n  ],\n  [\n    \"Washington\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        55.77092511,\n        35.82116788\n      ]\n    },\n    55.77092511,\n    35.82116788,\n    \"+19.9\"\n  ],\n  [\n    \"Wayne\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        64.86486486,\n        35.30997305\n      ]\n    },\n    64.86486486,\n    35.30997305,\n    \"+29.6\"\n  ],\n  [\n    \"Westmoreland\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        50.05045409,\n        28.61736334\n      ]\n    },\n    50.05045409,\n    28.61736334,\n    \"+21.4\"\n  ],\n  [\n    \"Wyoming\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        40,\n        35.59650824\n      ]\n    },\n    40,\n    35.59650824,\n    \"+4.4\"\n  ],\n  [\n    \"York\",\n    {\n      \"type\": \"line\",\n      \"values\": [\n        54.11985019,\n        41.11844787\n      ]\n    },\n    54.11985019,\n    41.11844787,\n    \"+13.0\"\n  ]\n];\n","import { RankedTable } from \"./classes/Table.js\";\nimport { BAIL_RATE_DATA, BAIL_RACE_DATA } from \"./data.js\";\n\nconst createBailRateTable = () => {\n  const columnConfigs = [\n    {\n      class: \"county-name-cell\",\n      header: \"County\",\n      sortable: false\n    },\n    {\n      class: \"viz-cell\",\n      header: {\n        \"start\": 0,\n        \"end\": 60,\n        \"averages\": [\n          {\n            \"name\": \"State Average\",\n            \"value\": 42.5966697900\n          }\n        ]\n      },\n      sortable: false\n    },\n    {\n      class: \"bail-rate-cell number-cell\",\n      header: \"Cash Bail Rate (%)\",\n      sortable: true\n    },\n    {\n      class: \"bail-cases-cell number-cell\",\n      header: \"Cash Bail Cases\",\n      sortable: true\n    },\n    {\n      class: \"total-cases-cell number-cell\",\n      header: \"Total Cases\",\n      sortable: true\n    },\n  ];\n  const initSort = 2; // initially sort by cash bail rate\n  const tableElement = document.getElementById(\"bail-rate-table\");\n  new RankedTable(BAIL_RATE_DATA, columnConfigs, initSort, tableElement);\n};\n\n\nconst createBailRaceTable = () => {\n  const columnConfigs = [\n    {\n      class: \"county-name-cell\",\n      header: \"County\",\n      sortable: false\n    },\n    {\n      class: \"viz-cell\",\n      header: {\n        \"start\": 0,\n        \"end\": 100,\n        \"averages\": [\n          {\n            \"name\": \"Black\",\n            \"value\": 54.7462525\n          },\n          {\n            \"name\": \"White\",\n            \"value\": 37.87542236\n          }\n        ]\n      },\n      sortable: false\n    },\n    {\n      class: \"bail-black-cell number-cell\",\n      header: \"% Cash Bail Black\",\n      sortable: true\n    },\n    {\n      class: \"bail-white-cell number-cell\",\n      header: \"% Cash Bail White\",\n      sortable: true\n    },\n    {\n      class: \"diff-cell number-cell\",\n      header: \"Diff\",\n      sortable: true\n    },\n  ];\n  const initSort = 4; // initially sort by difference\n  const tableElement = document.getElementById(\"bail-race-table\");\n\n  new RankedTable(BAIL_RACE_DATA, columnConfigs, initSort, tableElement);\n};\n\ncreateBailRateTable();\ncreateBailRaceTable();\n"]}