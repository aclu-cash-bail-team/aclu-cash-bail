{"version":3,"sources":["src/js/classes/Table.js","src/js/index.js"],"names":["Cell","className","element","document","createElement","setElementClass","TextCell","content","render","appendChild","createTextNode","NumberCell","toLocaleString","BarGraphCell","data","average","range","bar","style","width","label","diff","textContent","toFixed","averageLine","left","NumberLineCell","averages","vizColors","forEach","value","i","point","HeaderCell","sortCol","sortDir","initSort","table","id","addEventListener","classNameWithSort","getClassName","setSortColumn","setSortDirection","sort","cell","sortClass","addSorted","sorted","VizHeaderCell","start","end","startElement","createTickElement","endElement","averageElements","map","text","averageWrapper","averageColor","wrapper","innerHTML","toString","length","paddingLeft","line","HeaderRow","cells","row","RankedBodyRow","initialRank","rank","RankedTable","columnConfigs","tableElement","classNames","config","class","headers","header","validate","sortCols","sortable","getHeaderRow","Error","some","headerCells","headersWithRank","j","CellType","initialSort","clearedSortedCells","dataCol","a","b","rows","getRows","updateTable","rankReverse","tbody","getElementsByTagName","createBailRateTable","getElementById","createBailRaceTable"],"mappings":"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","file":"js.9e41c403.js","sourceRoot":"..","sourcesContent":["class Cell {\n  constructor(className) {\n    this.className = className;\n  }\n\n  render() {\n    this.element = document.createElement(\"td\");\n    this.setElementClass(this.className);\n  }\n\n  getClassName() {\n    return this.className;\n  }\n\n  setElementClass(className) {\n    this.element.className = className;\n  }\n}\n\n\nclass TextCell extends Cell {\n  constructor(content, className) {\n    super(className);\n    this.content = content;\n    this.render();\n  }\n\n  render() {\n    super.render();\n    this.element.appendChild(document.createTextNode(this.content));\n  }\n}\n\n\nclass NumberCell extends Cell {\n  constructor(content, className) {\n    super(className);\n    this.content = content.toLocaleString();\n    this.render();\n  }\n\n  render() {\n    super.render();\n    this.element.appendChild(document.createTextNode(this.content));\n  }\n}\n\n\nclass BarGraphCell extends Cell {\n  constructor(content, className, data) {\n    super(className);\n    // BarGraphCell should only ever be passed one number\n    this.content = content[\"values\"][0];\n    this.average = data[\"averages\"][0][\"value\"];\n    this.range = data;\n    this.render();\n  }\n\n  render() {\n    super.render();\n    // create the horizontal bar and scale its width by the value and range\n    const bar = document.createElement(\"div\");\n    bar.className = \"viz-bar\";\n    bar.style.width = `${this.content / this.range[\"end\"] * 100}%`;\n    // label the bar with the difference between value and average\n    const label = document.createElement(\"div\");\n    const diff = this.content - this.average;\n    label.textContent = `${diff > 0 ? \"+\" : \"\"}${diff.toFixed(1)}`;\n    label.className = \"bar-label\";\n    bar.appendChild(label);\n    this.element.appendChild(bar);\n    // add the vertical line denoting the average\n    const averageLine = document.createElement(\"div\");\n    averageLine.className = \"bar-average-line green\";\n    averageLine.style.left = `${this.average / this.range[\"end\"] * 100}%`;\n    this.element.appendChild(averageLine);\n  }\n}\n\n\nclass NumberLineCell extends Cell {\n  constructor(content, className, data) {\n    super(className);\n    this.content = content[\"values\"];\n    this.averages = data[\"averages\"];\n    this.range = data;\n    this.vizColors = [\"green\", \"purple\"];\n    this.render();\n  }\n\n  render() {\n    super.render();\n    // create the number line\n    const bar = document.createElement(\"div\");\n    bar.className = \"viz-number-line\";\n    this.element.appendChild(bar);\n    // create the points on the number line\n    this.content.forEach((value, i) => {\n      const point = document.createElement(\"div\");\n      point.className = `viz-number-line-point ${this.vizColors[i]}`;\n      point.style.left = `${value / this.range[\"end\"] * 100}%`;\n      this.element.appendChild(point);\n    });\n    // add the vertical line denoting the average\n    this.averages.forEach((average, i) => {\n      const averageLine = document.createElement(\"div\");\n      averageLine.className = `bar-average-line ${this.vizColors[i]}`;\n      averageLine.style.left = `${average[\"value\"] / this.range[\"end\"] * 100}%`;\n      this.element.appendChild(averageLine);\n    });\n  }\n}\n\n\nclass HeaderCell extends Cell {\n  constructor(content, className, sortCol, sortDir, initSort, table, id) {\n    super(className);\n    this.content = content;\n    this.sortCol = sortCol;\n    this.sortDir = sortDir;\n    this.initSort = initSort;\n    this.table = table;\n    this.id = id;\n    this.render();\n\n    // add event listener for sorting\n    if (this.sortCol) {\n      this.element.addEventListener(\"click\", () => {\n        const classNameWithSort = this.getClassName();\n        this.table.setSortColumn(this.id);\n        this.table.setSortDirection(this.sortDir);\n        this.table.sort(false);\n        // after sorting set the class to ensure its the only column highlighted\n        this.setElementClass(classNameWithSort, true);\n        // toggle sort direction for the next click\n        this.sortDir *= -1;\n      });\n    }\n\n    // if we're initializing this sort, update sortDir for the next click\n    if (this.initSort) {\n      this.sortDir *= -1;\n    }\n  }\n\n  render() {\n    const cell = document.createElement(\"th\");\n    cell.className = this.className;\n    cell.appendChild(document.createTextNode(this.content));\n    this.element = cell;\n    if (this.sortCol) {\n      const classNameWithSort = this.getClassName();\n      this.setElementClass(classNameWithSort, this.initSort);\n    }\n  }\n\n  getClassName() {\n    const sortClass = this.sortDir > 0 ? \"sort-asc\" :\n      this.sortDir < 0 ? \"sort-desc\" : \"\";\n    return `${this.className} ${sortClass}`;\n  }\n\n  setElementClass(className, addSorted) {\n    const sorted = addSorted ? \"sorted\" : \"\";\n    super.setElementClass(`${className} ${sorted}`);\n  }\n}\n\n\nclass VizHeaderCell extends HeaderCell {\n  constructor(data, className, sortCol, sortDir, initSort, table, id) {\n    super(data, className, sortCol, sortDir, initSort, table, id);\n  }\n\n  render() {\n    const vizColors = [\"green\", \"purple\"];\n    const start = this.content[\"start\"];\n    const end = this.content[\"end\"];\n    const averages = this.content[\"averages\"];\n\n    const cell = document.createElement(\"th\");\n    cell.className = this.className;\n    // create start, end, and average tick/number elements\n    const startElement = this.createTickElement(start, \"start-num\");\n    const endElement = this.createTickElement(end, \"end-num\");\n    const averageElements = averages.map((average, i) => {\n      const text = `${average[\"name\"]}:<br>${average[\"value\"]}%`;\n      const className = \"average\";\n      return this.createTickElement(text, className, vizColors[i]);\n    });\n    // create wrapper around averages for positioning\n    const averageWrapper = document.createElement(\"div\");\n    averageWrapper.className = \"average-wrapper\";\n    // offset the average elements by the value/end ratio (and subtract padding)\n    averageElements.forEach((element, i) => {\n      element.style.left = `calc(${averages[i][\"value\"] / end * 100}%)`;\n      averageWrapper.appendChild(element);\n    });\n    // add all the elements to the cell\n    [startElement, endElement, averageWrapper].forEach(element => {\n      cell.appendChild(element);\n    });\n    this.element = cell;\n  }\n\n  createTickElement(content, className, averageColor) {\n    const wrapper = document.createElement(\"div\");\n    wrapper.className = className;\n    const text = document.createElement(\"div\");\n    text.innerHTML = content;\n    if (className === \"average\") text.className = \"average-text\";\n    wrapper.appendChild(text);\n    // adjust padding based on number of digits\n    if (className === \"start-num\" && content.toString().length === 1) {\n      wrapper.style.paddingLeft = `${0.25}em`;\n    }\n\n    // create the vertical tick underneath the number\n    const line = document.createElement(\"div\");\n    line.className = `${className === \"average\" ? \"average-line\" : \"viz-line\"}`;\n    if (averageColor) line.className += ` ${averageColor}`;\n    wrapper.appendChild(line);\n    return wrapper;\n  }\n}\n\n\nclass HeaderRow {\n  constructor(cells) {\n    this.cells = cells;\n    this.render();\n  }\n\n  render() {\n    const row = document.createElement(\"tr\");\n    this.cells.forEach(cell => {\n      row.appendChild(cell.element);\n    });\n    this.element = row;\n  }\n\n  clearedSortedCells() {\n    this.cells.forEach(cell => {\n      const className = cell.getClassName();\n      cell.setElementClass(className, false);\n    });\n  }\n}\n\n\nclass RankedBodyRow {\n  constructor(cells, initialRank) {\n    this.cells = cells;\n    this.render(initialRank);\n  }\n\n  render(rank, sorted) {\n    const row = document.createElement(\"tr\");\n    const rankedCells = [\n      new TextCell(rank, \"rank-cell\"),\n      ...this.cells\n    ];\n    rankedCells.forEach((cell, i) => {\n      cell.setElementClass(\n        i === sorted ? `${cell.className} sorted` : cell.className\n      );\n      row.appendChild(cell.element);\n    });\n    this.element = row;\n  }\n}\n\n\nexport class RankedTable {\n  constructor(data, columnConfigs, initSort, tableElement) {\n    this.classNames = columnConfigs.map((config) => config.class);\n    this.headers = columnConfigs.map((config) => config.header);\n    this.data = data;\n    this.validate(this.data, this.classNames, this.headers);\n    this.element = tableElement;\n\n    this.sortCols = columnConfigs.map((config) => config.sortable);\n    // start with sorting descending; add one to account for rank\n    this.sortCol = initSort + 1;\n    this.sortDir = -1;\n    this.sort(true); // this initial sort populates this.rows\n\n    this.header = this.getHeaderRow();\n\n    this.render();\n  }\n\n  validate(data, classNames, headers) {\n    if (classNames.length !== headers.length) {\n      throw new Error(\"Number of class names does not match number of headers\");\n    }\n    if (data.some((row) => row.length != headers.length)) {\n      throw new Error(`${headers.length} columns of data required`);\n    }\n  }\n\n  getHeaderRow() {\n    const headerCells = this.headers.map((header, i) => {\n      const CellType = typeof(header) == \"string\" ? HeaderCell : VizHeaderCell;\n      return new CellType(\n        header,\n        this.classNames[i],\n        this.sortCols[i],\n        // 1 designates ascending; -1, descending (default); 0, not sortable\n        this.sortCols[i] ? -1 : 0,\n        i + 1 === this.sortCol,\n        this,\n        // adjust ids for rank and space headers\n        i + 1\n      );\n    });\n    const headersWithRank = [\n      new HeaderCell(\"Rank\", \"rank-cell\", false, 0, false, this, 0),\n      ...headerCells\n    ];\n    return new HeaderRow(headersWithRank);\n  }\n\n  getRows(data) {\n    return data.map((row, i) => {\n      // Specify how data will be rendered\n      const cells = row.map((cell, j) => {\n        let CellType = TextCell;\n        if (typeof(cell) == \"number\") CellType = NumberCell;\n        if (typeof(cell) == \"object\") {\n          CellType = cell[\"type\"] === \"bar\" ? BarGraphCell : NumberLineCell;\n        }\n        return new CellType(cell, this.classNames[j], this.headers[j]);\n      });\n      return new RankedBodyRow(cells, i + 1);\n    });\n  }\n\n  setSortColumn(i) {\n    this.sortCol = i;\n  }\n\n  setSortDirection(sortDir) {\n    this.sortDir = sortDir;\n  }\n\n  sort(initialSort) {\n    if (!initialSort) this.header.clearedSortedCells();\n\n    // data doesn't have rank or spacer, so subtract two from the index\n    const dataCol = this.sortCol - 1;\n    this.data.sort((a, b) => {\n      if (a[dataCol] < b[dataCol]) {\n        return this.sortDir * -1;\n      } else if (a[dataCol] > b[dataCol]) {\n        return this.sortDir;\n      } else {\n        return 0;\n      }\n    });\n    this.rows = this.getRows(this.data);\n    this.updateTable(false);\n  }\n\n  updateTable(rankReverse) {\n    const tbody = this.element.getElementsByTagName(\"tbody\")[0];\n    tbody.textContent = \"\";\n\n    // repopulate with updated rows\n    this.rows.forEach((row, i) => {\n      const rank = rankReverse ? this.rows.length - i : i + 1;\n      row.render(rank, this.sortCol);\n      tbody.appendChild(row.element);\n    });\n  }\n\n  render() {\n    // create header row\n    const thead = this.element.getElementsByTagName(\"thead\")[0];\n    thead.appendChild(this.header.element);\n\n    // create rows\n    const tbody = this.element.getElementsByTagName(\"tbody\")[0];\n    this.rows.forEach(row => {\n      tbody.appendChild(row.element);\n    });\n  }\n}\n","import { RankedTable } from \"./classes/Table.js\";\n\nconst createBailRateTable = () => {\n  const columnConfigs = [\n    {\n      class: \"county-name-cell\",\n      header: \"County\",\n      sortable: false\n    },\n    {\n      class: \"viz-cell\",\n      header: {\n        \"start\": 0,\n        \"end\": 60,\n        \"averages\": [\n          {\n            \"name\": \"State Average\",\n            \"value\": 42.5\n          }\n        ]\n      },\n      sortable: false\n    },\n    {\n      class: \"bail-rate-cell number-cell\",\n      header: \"Cash Bail Rate (%)\",\n      sortable: true\n    },\n    {\n      class: \"bail-cases-cell number-cell\",\n      header: \"Cash Bail Cases\",\n      sortable: true\n    },\n    {\n      class: \"total-cases-cell number-cell\",\n      header: \"Total Cases\",\n      sortable: true\n    },\n  ];\n  const initSort = 2; // initially sort by cash bail rate\n  const data = [\n    [\"Delaware\", {\"type\": \"bar\", \"values\": [55.7]}, 55.7, 9514, 17863],\n    [\"Lehigh\", {\"type\": \"bar\", \"values\": [54.9]}, 54.9, 6526, 13069],\n    [\"Lackawanna\", {\"type\": \"bar\", \"values\": [52.6]}, 52.6, 3236, 6148],\n    [\"Berks\", {\"type\": \"bar\", \"values\": [50.9]}, 50.9, 6266, 12230],\n    [\"Philadelphia\", {\"type\": \"bar\", \"values\": [50.1]}, 50.1, 32823, 65487],\n    [\"Beaver\", {\"type\": \"bar\", \"values\": [49.0]}, 49.0, 6226, 12230]\n  ];\n  const tableElement = document.getElementById(\"bail-rate-table\");\n  new RankedTable(data, columnConfigs, initSort, tableElement);\n};\n\n\nconst createBailRaceTable = () => {\n  const columnConfigs = [\n    {\n      class: \"county-name-cell\",\n      header: \"County\",\n      sortable: false\n    },\n    {\n      class: \"viz-cell\",\n      header: {\n        \"start\": 0,\n        \"end\": 100,\n        \"averages\": [\n          {\n            \"name\": \"Black\",\n            \"value\": 54.7\n          },\n          {\n            \"name\": \"White\",\n            \"value\": 37.9\n          }\n        ]\n      },\n      sortable: false\n    },\n    {\n      class: \"bail-black-cell number-cell\",\n      header: \"% Cash Bail Black\",\n      sortable: true\n    },\n    {\n      class: \"bail-white-cell number-cell\",\n      header: \"% Cash Bail White\",\n      sortable: true\n    },\n    {\n      class: \"diff-cell number-cell\",\n      header: \"Diff\",\n      sortable: true\n    },\n  ];\n  const initSort = 4; // initially sort by difference\n  const data = [\n    [\"Somerset\", {\"type\": \"line\", \"values\": [69.6, 23.2]}, 69.6, 23.2, \"+46.4\"],\n    [\"Centre\", {\"type\": \"line\", \"values\": [46.7, 21.9]}, 46.7, 21.9, \"+25.7\"],\n    [\"Lycoming\", {\"type\": \"line\", \"values\": [55, 28.1]}, 55, 28.1, \"+26.9\"],\n    [\"Jefferson\", {\"type\": \"line\", \"values\": [73, 38.4]}, 73, 38.4, \"+34.6\"],\n    [\"Crawford\", {\"type\": \"line\", \"values\": [53.3, 28.3]}, 53.3, 28.3, \"+25\"],\n    [\"Blair\", {\"type\": \"line\", \"values\": [58.7, 31.8]}, 58.7, 31.8, \"+26.9\"]\n  ];\n  const tableElement = document.getElementById(\"bail-race-table\");\n\n  new RankedTable(data, columnConfigs, initSort, tableElement);\n};\n\ncreateBailRateTable();\ncreateBailRaceTable();\n"]}